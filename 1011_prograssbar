import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QBasicTimer

class MyWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUI()

    def setupUI(self):
        self.setGeometry(800, 400, 300, 150)
        self.lineEdit = QLineEdit("입력하시오", self)
        self.lineEdit.move(80, 20)

        self.pbar = QProgressBar(self)
        self.pbar.setGeometry(30, 50, 200, 25)
        self.timer = QBasicTimer()


        self.step = 0
        self.statusBar = QStatusBar(self)
        self.setStatusBar(self.statusBar)

        self.btn = QPushButton('Start', self)
        self.btn.move(40, 80)
        self.btn.clicked.connect(self.doAction)


        # self.timer = QBasicTimer()
        # self.step = 0
    # def lineEditChanged(self):
    #     self.statusBar.showMessage(self.lineEdit.text())
    #     # print(self.lineEdit.text())
    #     self.test = self.lineEdit.text()

    def doAction(self):
        self.test = self.lineEdit.text()
        print(self.test)
        self.statusBar.showMessage(self.lineEdit.text())
        # self.pbar.setValue(self.step)
        if self.timer.isActive():
            self.timer.stop()
            self.btn.setText('Start')
        else:
            self.timer.start(100, self)
            self.btn.setText('Stop')

    def timerEvent(self, e):
        if self.step >= 100:
            self.timer.stop()
            self.btn.setText('Finished')
            return
        self.step = self.step + 1
        self.pbar.setValue(self.step)

        # self.pbar.setValue(100 * (i / len(list))

        # self.show()
        # if self.timer.isActive():
        #     self.timer.stop()
        #     self.btn.setText('Start')
        # else:
        #     self.timer.start(100, self)
        #     self.btn.setText('Stop')


if __name__ == "__main__":
    app = QApplication(sys.argv)
    mywindow = MyWindow()
    mywindow.show()
    app.exec_()
